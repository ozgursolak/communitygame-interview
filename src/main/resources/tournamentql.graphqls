type Tournament {
    id: ID!,
    tournamentName: String!,
    organizerName: String!,
    quota: Int!,
    target: Float,
    currency: String,
    startDate: String!,
    endDate: String!,
    description: String,
    tournamentAddress: String,
    isActive: Boolean
}

input TournamentRequest {
    tournamentName: String!,
    organizerName: String!,
    quota: Int!,
    target: Float,
    currency: String,
    startDate: String!,
    endDate: String!,
    description: String,
    tournamentAddress: String,
    isActive: Boolean
}

input SignupRequest {
    username: String!,
    email: String!,
    roles: [String],
    password: String!,
}

input LoginRequest {
    username: String!,
    password: String!,
}

type TournamentResponse {
    id : String!
}

type MessageResponse {
    message : String!
}

type JwtResponse {
    token: String,
    type: String,
    id: String,
    username: String,
    email: String,
    roles: [String]
}

type Query {
    tournaments:[Tournament]
}

type Mutation {
    createTournament(tournamentRequest:TournamentRequest):TournamentResponse
    registerUser(signupRequest:SignupRequest):MessageResponse
    signIn(loginRequest:LoginRequest):JwtResponse
}
